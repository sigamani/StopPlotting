#include "TColor.h"
#include "TStyle.h"
#include "TMath.h"
#include "TFile.h"
#include "TF2.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TH2D.h"
#include "TTree.h"
#include "TGraph.h"
#include "TMultiGraph.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "TStyle.h"
#include "TLatex.h"
#include "TPolyLine.h"
#include "TROOT.h"
#include "TF1.h"
#include "TGaxis.h"


#include <iomanip>
#include <fstream>
#include <iostream>
#include <time.h>
#include <vector>
#include <string>
#include <sstream>
#include <map>
#include <utility>




using namespace std;
void rootlogon();


TFile *fout = new TFile("/afs/cern.ch/work/s/sigamani/public/CMSSW_6_1_1/src/PlotsSMS/config/SUS13011/T2tt_results2.root","recreate");


void ReturnTGraph(TH2D *SMS){

   TCanvas* c = new TCanvas("c","Contour List",0,0,600,600);
   c->SetRightMargin(0.15);
   c->SetTopMargin(0.15);


  SMS->SetContour(3);
  SMS->SetContourLevel(0, 0.99); //value for your first level
  SMS->SetContourLevel(1, 1e6); //non-existing high level
  SMS->SetContourLevel(2, 1e9); //non-existing high level


   SMS->Draw("CONT Z LIST"); 
   c->Update();


   TObjArray *conts = (TObjArray*)gROOT->GetListOfSpecials()->FindObject("contours");
   TList* contLevel = NULL;
   TGraph* curv     = NULL;
   TGraph* gc       = NULL;
   double contours[] = NULL; 

   Int_t nGraphs    = 0;
   Int_t TotalConts = 0;

   if (conts == NULL){
      printf("*** No Contours Were Extracted!\n");
      TotalConts = 0;
      return;
   } else {
      TotalConts = conts->GetSize();
   }

   printf("TotalConts = %d\n", TotalConts);



  for(int i = 0; i < TotalConts; i++){
      contLevel = (TList*)conts->At(i);
      printf("Contour %d has %d Graphs\n", i, contLevel->GetSize());
      nGraphs += contLevel->GetSize();
   }

   nGraphs = 0;



 
   TCanvas c1("c1","c1",800,600);
   c1.SetLeftMargin(0.1706731);
   c1.SetRightMargin(0.1983173);
   c1.SetTopMargin(0.04895105);
   c1.SetBottomMargin(0.1416084);
   c1.Range(-289.7381,-191.8196,1334.643,1074.487);

   TH2D *hr = new TH2D("hr","",26,162.5, 812.5, 16, 12.5,412.5);
   hr->Draw();
   Double_t x0, y0, z0;
   TLatex l;
   l.SetTextSize(0.03);
   char val[20];

   for(int i = 0; i < TotalConts; i++){
      contLevel = (TList*)conts->At(i);
      if (i<3) z0 = contours[2-i];
      else     z0 = contours[i];
      printf("Z-Level Passed in as:  Z = %f\n", z0);

      // Get first graph from list on curves on this level
      curv = (TGraph*)contLevel->First();
      for(int j = 0; j < contLevel->GetSize(); j++){
         curv->GetPoint(0, x0, y0);
         if (z0<0) curv->SetLineColor(kRed);
         if (z0>0) curv->SetLineColor(kRed);
         nGraphs ++;
         printf("\tGraph: %d  -- %d Elements\n", nGraphs,curv->GetN());

         gc = (TGraph*)curv->Clone();
         gc->SetLineWidth(2);
         gc->Draw("C");
         gc->SetName("graph_smoothed_Exp"); 

  
       sprintf(val,"%g",z0);
        // l.DrawLatex(x0,y0,val);
         curv = (TGraph*)contLevel->After(curv); // Get Next graph
      }
   }

   fout->cd();
   gc->Write();
   fout->Write();
   fout->Close();


//   c1.Update();
//   printf("\n\n\tExtracted %d Contours and %d Graphs \n", TotalConts, nGraphs ); 
//   c1.SaveAs("~/www/test.png");


}



void plot_limit(TString dir){
/*
          gStyle->SetOptStat(0);
          gStyle->SetCanvasColor(0);
          gStyle->SetPadColor(0);
          gStyle->SetMarkerStyle(15);
          gStyle->SetMarkerSize(0.25);
          gStyle->SetTextFont(42);
          gStyle->SetMarkerColor(37);


  //palette settings - completely independent
  const Int_t NRGBs = 6;
  const Int_t NCont = 999;

  Double_t stops[NRGBs] = { 0.00, 0.1, 0.34, 0.61, 0.84, 1.00 };
  Double_t red[NRGBs]   = { 0.99, 0.0, 0.00, 0.87, 1.00, 0.51 };
  Double_t green[NRGBs] = { 0.00, 0.0, 0.81, 1.00, 0.20, 0.00 };
  Double_t blue[NRGBs]  = { 0.99, 0.0, 1.00, 0.12, 0.00, 0.00 };


  TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
  gStyle->SetNumberContours(NCont);

  gStyle->SetOptStat(0);

*/
   double shell;

   if (dir == "T2bw025") {dataset_name = "T2bw025"; shell = 80. / 0.25;}
   if (dir == "T2bw050") {dataset_name = "T2bw050"; shell = 80. / 0.50;}
   if (dir == "T2bw075") {dataset_name = "T2bw075"; shell = 80. / 0.75;}
   if (dir == "T2tt")    {dataset_name = "T2tt";    shell = 173.;}



   TH2D *SMS = new TH2D("SMS","",26,162.5, 812.5, 16, 12.5,412.5); 
   TH2D *SMSp = new TH2D("SMSp","",26,162.5, 812.5, 16, 12.5,412.5); 
   TH2D *SMSm = new TH2D("SMSm","",26,162.5, 812.5, 16, 12.5,412.5); 


              for(int x=175; x<=800; x+=25){


                      for(int y=25; y<=700; y+=25){


  		  char shortfilename[500];
  		  char filename[500];


                  sprintf(filename,"/afs/cern.ch/work/s/sigamani/public/CMSSW_6_1_1/src/HiggsAnalysis/CombinedLimit/mT100/%s/higgsCombineS%d-N%d.Asymptotic.mH120.root", dataset_name, x, y);

   
                  ifstream ifile(filename);
	          if (!ifile.good()) continue; 

	         
		  TFile* file  = new TFile(filename, "READ");  
		  char* name = (char*)file->GetName();



TTree *limittree = (TTree*)file->Get("limit");


double high_val = 100.;


TH1F* obs = new TH1F("obs","",100,0,high_val);
limittree->Draw("limit>>obs", "quantileExpected==-1");
TH1F* expm2 = new TH1F("expm2","",100,0,high_val);
limittree->Draw("limit>>expm2", "quantileExpected>0.02 && quantileExpected<0.03");
TH1F* expm1 = new TH1F("expm1","",100,0,high_val);
limittree->Draw("limit>>expm1", "quantileExpected>0.15 && quantileExpected<0.16");
TH1F* exp = new TH1F("exp","",100,0,high_val);
limittree->Draw("limit>>exp", "quantileExpected==0.5");
TH1F* expp1 = new TH1F("expp1","",100,0,high_val);
limittree->Draw("limit>>expp1", "quantileExpected>0.83 && quantileExpected<0.84");
TH1F* expp2 = new TH1F("expp2","",100,0,high_val);
limittree->Draw("limit>>expp2", "quantileExpected>0.97 && quantileExpected<0.98");



           if (y > 300.) { SMS->Fill(x,y,1.1); }else 
 
	   SMS->Fill(x,y,exp->GetMean());
	   SMSp->Fill(x,y,expp1->GetMean());
	   SMSm->Fill(x,y,expm1->GetMean());
 
		  file->Close();

		}
	  }


	      // Hack to get the contours to work properly

              for(int x=175; x<=800; x+=25){

                      for(int y=25; y<=700; y+=25){
	
			if (x-y > 100) continue;

		           SMS->Fill(x,y,1.1);
		           SMSp->Fill(x,y,1.1);
		           SMSm->Fill(x,y,1.1);

			}

		}		


   ReturnTGraph(SMS);
   ReturnTGraph(SMSp);
   ReturnTGraph(SMSm);



}










void rootlogon() {
   gROOT->SetStyle("Plain");
  // gStyle->SetPalette(1);
   gStyle->SetOptStat(1111111);  // Show overflow, underflow + SumOfWeights 
   gStyle->SetOptFit(111110);
   gStyle->SetOptFile(1);
   gStyle->SetMarkerStyle(20);
   gStyle->SetMarkerSize(2.);
   gStyle->SetMarkerColor(1);
   gStyle->SetTitleOffset(1.20,"Y");
   gStyle->SetTextFont(42);
   
    //define high def color palette
    const Int_t NRGBs = 5;
    const Int_t NCont = 255;

    Double_t stops[NRGBs] = { 0.00, 0.34, 0.61, 0.84, 1.00 };
    Double_t red[NRGBs]   = { 0.00, 0.00, 0.87, 1.00, 0.51 };
    Double_t green[NRGBs] = { 0.00, 0.81, 1.00, 0.20, 0.00 };
    Double_t blue[NRGBs]  = { 0.51, 1.00, 0.12, 0.00, 0.00 };
    TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
    gStyle->SetNumberContours(NCont);

    cout << "loading TDR style and setting as default" << endl;
    gROOT->ProcessLine(".L ~/tdrstyle.C");
    setTDRStyle();

}





