#include "TColor.h"
#include "TStyle.h"
#include "TMath.h"
#include "TFile.h"
#include "TF2.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TH2D.h"
#include "TTree.h"
#include "TGraph.h"
#include "TMultiGraph.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "TStyle.h"
#include "TLatex.h"
#include "TPolyLine.h"
#include "TROOT.h"
#include "TF1.h"
#include "TGaxis.h"


#include <iomanip>
#include <fstream>
#include <iostream>
#include <time.h>
#include <vector>
#include <string>
#include <sstream>
#include <map>
#include <utility>



using namespace std;
void rootlogon();

double getXsection(int);



TFile *fout = new TFile("T1tttt_results.root","recreate");


void plot_limit(TString dir){

  /*        gStyle->SetOptStat(0);
          gStyle->SetCanvasColor(0);
          gStyle->SetPadColor(0);
          gStyle->SetMarkerStyle(15);
          gStyle->SetMarkerSize(0.25);
          gStyle->SetTextFont(42);
          gStyle->SetMarkerColor(37);
*/

  //palette settings - completely independent
  const Int_t NRGBs = 6;
  const Int_t NCont = 999;

  Double_t stops[NRGBs] = { 0.00, 0.1, 0.34, 0.61, 0.84, 1.00 };
  Double_t red[NRGBs]   = { 0.99, 0.0, 0.00, 0.87, 1.00, 0.51 };
  Double_t green[NRGBs] = { 0.00, 0.0, 0.81, 1.00, 0.20, 0.00 };
  Double_t blue[NRGBs]  = { 0.99, 0.0, 1.00, 0.12, 0.00, 0.00 };


  //TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
  //gStyle->SetNumberContours(NCont);

  gStyle->SetOptStat(0);


   double shell;

   if (dir == "T2bw025") {dataset_name = "T2bw025"; shell = 80. / 0.25;}
   if (dir == "T2bw050") {dataset_name = "T2bw050"; shell = 80. / 0.50;}
   if (dir == "T2bw075") {dataset_name = "T2bw075"; shell = 80. / 0.75;}
   if (dir == "T2tt")    {dataset_name = "T2tt";    shell = 173.;}



   TH2D *SMS = new TH2D("SMS","",26,162.5, 812.5, 16, 12.5,412.5); 
   TH2D *SMSp = new TH2D("SMSp","",26,162.5, 812.5, 16, 12.5,412.5); 
   TH2D *SMSm = new TH2D("SMSm","",26,162.5, 812.5, 16, 12.5,412.5); 

   TH2D *hXsec_exp_corr = new TH2D("hXsec_exp_corr","",26,162.5, 812.5, 16, 12.5,412.5); 


   Double_t h[100], g[100];
   Int_t n = 20;
   for (Int_t i=0;i<n;i++) {
     h[i] = i*0.1;
     g[i] = 10*sin(h[i]+0.2);
	
   }

   graph_smoothed_Exp  = new TGraph(n,h,g);
   graph_smoothed_ExpM = new TGraph(n,h,g);
   graph_smoothed_ExpP = new TGraph(n,h,g);
   graph_smoothed_Obs  = new TGraph(n,h,g);
   graph_smoothed_ObsM = new TGraph(n,h,g);
   graph_smoothed_ObsP = new TGraph(n,h,g);

   graph_smoothed_Exp->SetName("graph_smoothed_Exp");
   graph_smoothed_ExpM->SetName("graph_smoothed_ExpM");
   graph_smoothed_ExpP->SetName("graph_smoothed_ExpP");
   graph_smoothed_Obs->SetName("graph_smoothed_Obs");
   graph_smoothed_ObsM->SetName("graph_smoothed_ObsM");
   graph_smoothed_ObsP->SetName("graph_smoothed_ObsP");

              for(int x=175; x<=800; x+=25){



                      for(int y=25; y<=700; y+=25){




			char shortfilename[500];
			char filename[500];


			sprintf(filename,"/afs/cern.ch/work/s/sigamani/public/CMSSW_6_1_1/src/HiggsAnalysis/CombinedLimit/mT100/%s/higgsCombineS%d-N%d.Asymptotic.mH120.root", dataset_name, x, y);

	   
			ifstream ifile(filename);
			if (!ifile.good()) continue; 

			 
			TFile* file  = new TFile(filename, "READ");  
			char* name = (char*)file->GetName();



			TTree *limittree = (TTree*)file->Get("limit");


			double high_val = 100.;


			TH1F* obs = new TH1F("obs","",100,0,high_val);
			limittree->Draw("limit>>obs", "quantileExpected==-1");
			TH1F* expm2 = new TH1F("expm2","",100,0,high_val);
			limittree->Draw("limit>>expm2", "quantileExpected>0.02 && quantileExpected<0.03");
			TH1F* expm1 = new TH1F("expm1","",100,0,high_val);
			limittree->Draw("limit>>expm1", "quantileExpected>0.15 && quantileExpected<0.16");
			TH1F* exp = new TH1F("exp","",100,0,high_val);
			limittree->Draw("limit>>exp", "quantileExpected==0.5");
			TH1F* expp1 = new TH1F("expp1","",100,0,high_val);
			limittree->Draw("limit>>expp1", "quantileExpected>0.83 && quantileExpected<0.84");
			TH1F* expp2 = new TH1F("expp2","",100,0,high_val);
			limittree->Draw("limit>>expp2", "quantileExpected>0.97 && quantileExpected<0.98");




			hXsec_exp_corr->Fill(x,y,exp->GetMean() * getXsection(x));
			//SMSp->Fill(x,y,expp1->GetMean());
			//SMSm->Fill(x,y,expm1->GetMean());

	 // cout << "M_STOP, \t M_LSP, Limit Strength:  " 
	 // cout << x << ", \t" << y << ", \t "<< exp->GetMean() << endl;


	  cout << getXsection(x) << endl;
	 
			  file->Close();

		}
	  }


	      // Hack to get the contours to work properly

              for(int x=175; x<=800; x+=25){

                      for(int y=25; y<=700; y+=25){
	
			if (x-y > 100) continue;

		           hXsec_exp_corr->Fill(x,y,1.1);
		           //SMSp->Fill(x,y,1.1);
		           //SMSm->Fill(x,y,1.1);

			}

		}		


  hXsec_exp_corr->SetFillColor(1);
  //SMSp->SetFillColor(2);
  //SMSm->SetFillColor(4);

  int colors[3] = {1,2,4}; //red, blue,black
  gStyle->SetPalette(3,colors);  


  hXsec_exp_corr->SetContour(3);
  hXsec_exp_corr->SetContourLevel(0,0.99); //value for your first level
  hXsec_exp_corr->SetContourLevel(1,1e6); //non-existing high level
  hXsec_exp_corr->SetContourLevel(2,1e9); //non-existing high level
  hXsec_exp_corr->SetLineColor(1);
  hXsec_exp_corr->Draw("cont1");

  /*SMSp->SetContour(3);
  SMSp->SetContourLevel(0,0.99); //value for your first level
  SMSp->SetContourLevel(1,1e6); //non-existing high level
  SMSp->SetContourLevel(2,1e9); //non-existing high level
  SMSp->SetLineColor(2);
//  SMSp->Draw("cont1 same");

  SMSm->SetContour(3);
  SMSm->SetContourLevel(0,0.99); //value for your first level
  SMSm->SetContourLevel(1,1e6); //non-existing high level
  SMSm->SetContourLevel(2,1e9); //non-existing high level
  SMSm->SetLineColor(4);
//  SMSm->Draw("cont1 same");

*/

  fout->cd();
  hXsec_exp_corr->Write();
  graph_smoothed_Exp->Write(); 
  graph_smoothed_ExpM->Write(); 
  graph_smoothed_ExpP->Write();
  graph_smoothed_Obs->Write(); 
  graph_smoothed_ObsM->Write(); 
  graph_smoothed_ObsP->Write(); 

  fout->Write();
  fout->Close();



/*  TLegendEntry *legge;
  TLegend *leg;
  leg = new TLegend(0.6,0.55,0.9,0.85);
  leg->SetFillStyle(0); leg->SetBorderSize(0); leg->SetTextSize(0.043);
  legge = leg->AddEntry(SMS,   "Exp", "l");
  legge = leg->AddEntry(SMSp,   "Exp plus", "l");
  legge = leg->AddEntry(SMSm,   "Exp minus", "l");
  leg->SetFillColor(0);
  leg->Draw();
*/

   //c1->SaveAs(" ~/www/STOP/NNTraining/8TeV/Plots22/limits/BkgYield010_"+dir+".png");
   c1->SaveAs(" ~/www/stops_"+dir+".png");



}




double getXsection(int stopmass) {

  if (stopmass == 100) return 559.757; 
  if (stopmass == 105) return 448.456; 
  if (stopmass == 110) return 361.917; 
  if (stopmass == 115) return 293.281; 
  if (stopmass == 120) return 240.077; 
  if (stopmass == 125) return 197.122; 
  if (stopmass == 130) return 163.376; 
  if (stopmass == 135) return 135.791; 
  if (stopmass == 140) return 113.319; 
  if (stopmass == 145) return 95.0292; 
  if (stopmass == 150) return 80.268 ;
  if (stopmass == 155) return 68.0456; 
  if (stopmass == 160) return 58.01  ;
  if (stopmass == 165) return 49.6639; 
  if (stopmass == 170) return 42.6441; 
  if (stopmass == 175) return 36.7994; 
  if (stopmass == 180) return 31.8695; 
  if (stopmass == 185) return 27.7028; 
  if (stopmass == 190) return 24.1585; 
  if (stopmass == 195) return 21.1597; 
  if (stopmass == 200) return 18.5245; 
  if (stopmass == 205) return 16.2439; 
  if (stopmass == 210) return 14.3201; 
  if (stopmass == 215) return 12.6497; 
  if (stopmass == 220) return 11.1808; 
  if (stopmass == 225) return 9.90959; 
  if (stopmass == 230) return 8.78125; 
  if (stopmass == 235) return 7.81646; 
  if (stopmass == 240) return 6.96892; 
  if (stopmass == 245) return 6.22701; 
  if (stopmass == 250) return 5.57596; 
  if (stopmass == 255) return 5.00108; 
  if (stopmass == 260) return 4.48773; 
  if (stopmass == 265) return 4.03416; 
  if (stopmass == 270) return 3.63085; 
  if (stopmass == 275) return 3.2781 ;
  if (stopmass == 280) return 2.95613;
  if (stopmass == 285) return 2.67442;
  if (stopmass == 290) return 2.42299;
  if (stopmass == 295) return 2.19684;
  if (stopmass == 300) return 1.99608;
  if (stopmass == 305) return 1.81486;
  if (stopmass == 310) return 1.64956;
  if (stopmass == 315) return 1.50385;
  if (stopmass == 320) return 1.3733 ;
  if (stopmass == 325) return 1.25277; 
  if (stopmass == 330) return 1.14277; 
  if (stopmass == 335) return 1.04713; 
  if (stopmass == 340) return 0.959617;  
  if (stopmass == 345) return 0.879793;
  if (stopmass == 350) return 0.807323;
  if (stopmass == 355) return 0.74141 ;
  if (stopmass == 360) return 0.681346;
  if (stopmass == 365) return 0.626913;
  if (stopmass == 370) return 0.576882;
  if (stopmass == 375) return 0.531443;
  if (stopmass == 380) return 0.489973;
  if (stopmass == 385) return 0.452072;
  if (stopmass == 390) return 0.4176  ;
  if (stopmass == 395) return 0.385775;
  if (stopmass == 400) return 0.35683 ;
  if (stopmass == 405) return 0.329881;
  if (stopmass == 410) return 0.305512;
  if (stopmass == 415) return 0.283519;
  if (stopmass == 420) return 0.262683;
  if (stopmass == 425) return 0.243755;
  if (stopmass == 430) return 0.226367;
  if (stopmass == 435) return 0.209966;
  if (stopmass == 440) return 0.195812;
  if (stopmass == 445) return 0.181783;
  if (stopmass == 450) return 0.169668;
  if (stopmass == 455) return 0.158567;
  if (stopmass == 460) return 0.147492;
  if (stopmass == 465) return 0.137392;
  if (stopmass == 470) return 0.128326;
  if (stopmass == 475) return 0.119275;
  if (stopmass == 480) return 0.112241;
  if (stopmass == 485) return 0.104155;
  if (stopmass == 490) return 0.097787;
  if (stopmass == 495) return 0.091451;
  if (stopmass == 500) return 0.085584;
  if (stopmass == 505) return 0.080132;
  if (stopmass == 510) return 0.075100;
  if (stopmass == 515) return 0.070343;
  if (stopmass == 520) return 0.066018; 
  if (stopmass == 525) return 0.061864;
  if (stopmass == 530) return 0.058034;
  if (stopmass == 535) return 0.054511;
  if (stopmass == 540) return 0.051174;
  if (stopmass == 545) return 0.048153;
  if (stopmass == 550) return 0.045206;
  if (stopmass == 555) return 0.042478;
  if (stopmass == 560) return 0.039959;
  if (stopmass == 565) return 0.037639;
  if (stopmass == 570) return 0.035424;
  if (stopmass == 575) return 0.033398;
  if (stopmass == 580) return 0.031365;
  if (stopmass == 585) return 0.029547;
  if (stopmass == 590) return 0.027939;
  if (stopmass == 595) return 0.026326;
  if (stopmass == 600) return 0.024800;
  if (stopmass == 605) return 0.023380;
  if (stopmass == 610) return 0.022067;
  if (stopmass == 615) return 0.020846;
  if (stopmass == 620) return 0.019633;
  if (stopmass == 625) return 0.018525;
  if (stopmass == 630) return 0.017507;
  if (stopmass == 635) return 0.016495;
  if (stopmass == 640) return 0.015580;
  if (stopmass == 645) return 0.014772;
  if (stopmass == 650) return 0.013956;
  if (stopmass == 655) return 0.013245;
  if (stopmass == 660) return 0.012539;
  if (stopmass == 665) return 0.011828;
  if (stopmass == 670) return 0.011222;
  if (stopmass == 675) return 0.010612;
  if (stopmass == 680) return 0.010051;
  if (stopmass == 685) return 0.009525;
  if (stopmass == 690) return 0.009030;
  if (stopmass == 695) return 0.008563;
  if (stopmass == 700) return 0.008114;
  if (stopmass == 705) return 0.007695;
  if (stopmass == 710) return 0.007300;
  if (stopmass == 715) return 0.006922;
  if (stopmass == 720) return 0.006567;
  if (stopmass == 725) return 0.006232;
  if (stopmass == 730) return 0.005917;
  if (stopmass == 735) return 0.005610;
  if (stopmass == 740) return 0.005326;
  if (stopmass == 745) return 0.005060;
  if (stopmass == 750) return 0.004806;
  if (stopmass == 755) return 0.004559;
  if (stopmass == 760) return 0.004336;
  if (stopmass == 765) return 0.004121;
  if (stopmass == 770) return 0.003918;
  if (stopmass == 775) return 0.003727;
  if (stopmass == 780) return 0.003542;
  if (stopmass == 785) return 0.003369;
  if (stopmass == 790) return 0.003204;
  if (stopmass == 795) return 0.003049;
  if (stopmass == 800) return 0.002895;
  if (stopmass == 805) return 0.002754;
  if (stopmass == 810) return 0.002618;
  if (stopmass == 815) return 0.002492;
  if (stopmass == 820) return 0.002371;
  if (stopmass == 825) return 0.002261;
  if (stopmass == 830) return 0.002146;
  if (stopmass == 835) return 0.002045;
  if (stopmass == 840) return 0.001951;
  if (stopmass == 845) return 0.001857;
  if (stopmass == 850) return 0.001767;
                                      
                                      
}                                     
                                      
                                      
